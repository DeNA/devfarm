package platforms

import (
	"fmt"
	"time"
)

type EitherPlan struct {
	CommonPart
	OSName
	IOSSpecificPart
	AndroidSpecificPart
}

func (e EitherPlan) IOS() IOSPlan {
	if e.OSName != OSIsIOS {
		panic(fmt.Sprintf("plan must be for Andoird: %q", e.OSName))
	}
	return IOSPlan{
		CommonPart:      e.CommonPart,
		IOSSpecificPart: e.IOSSpecificPart,
	}
}

func (e EitherPlan) Android() AndroidPlan {
	if e.OSName != OSIsAndroid {
		panic(fmt.Sprintf("plan must be for Andoird: %q", e.OSName))
	}
	return AndroidPlan{
		CommonPart:          e.CommonPart,
		AndroidSpecificPart: e.AndroidSpecificPart,
	}
}

type CommonPart struct {
	Platform     ID                `json:"platform"`
	GroupName    InstanceGroupName `json:"group_name"`
	Lifetime     time.Duration     `json:"lifetime"`
	LocationHint string            `json:"meta,omitempty"`
}

type IOSSpecificPart struct {
	Device IOSDevice      `json:"ios_device"`
	IPA    IPAPathOnLocal `json:"ipa"`
	Args   IOSArgs        `json:"args"`
}

type AndroidSpecificPart struct {
	Device       AndroidDevice       `json:"android_device"`
	APK          APKPathOnLocal      `json:"apk"`
	AppID        AndroidAppID        `json:"app_id"`
	IntentExtras AndroidIntentExtras `json:"intent_extras"`
}

type IOSPlan struct {
	CommonPart
	IOSSpecificPart
}

func (p IOSPlan) Either() EitherPlan {
	return EitherPlan{
		CommonPart:      p.CommonPart,
		OSName:          OSIsIOS,
		IOSSpecificPart: p.IOSSpecificPart,
	}
}

func NewIOSPlan(
	platform ID,
	groupName InstanceGroupName,
	device IOSDevice,
	ipa IPAPathOnLocal,
	args IOSArgs,
	lifetime time.Duration,
	locationHint string,
) IOSPlan {
	return IOSPlan{
		CommonPart: CommonPart{
			Platform:     platform,
			GroupName:    groupName,
			Lifetime:     lifetime,
			LocationHint: locationHint,
		},
		IOSSpecificPart: IOSSpecificPart{
			Device: device,
			IPA:    ipa,
			Args:   args,
		},
	}
}

type AndroidPlan struct {
	CommonPart
	AndroidSpecificPart
}

func (p AndroidPlan) Either() EitherPlan {
	return EitherPlan{
		CommonPart:          p.CommonPart,
		OSName:              OSIsAndroid,
		AndroidSpecificPart: p.AndroidSpecificPart,
	}
}

func NewAndroidPlan(
	platform ID,
	groupName InstanceGroupName,
	device AndroidDevice,
	apk APKPathOnLocal,
	appID AndroidAppID,
	intentExtras AndroidIntentExtras,
	lifetime time.Duration,
	locationHint string,
) AndroidPlan {
	return AndroidPlan{
		CommonPart: CommonPart{
			Platform:     platform,
			GroupName:    groupName,
			Lifetime:     lifetime,
			LocationHint: locationHint,
		},
		AndroidSpecificPart: AndroidSpecificPart{
			Device:       device,
			APK:          apk,
			AppID:        appID,
			IntentExtras: intentExtras,
		},
	}
}

const (
	LocationHintForGeneratedByCode = "n/a (generated by code)"
	LocationHintForCLIArguments    = "n/a (command line arguments)"
)

func LocationHintForPlanfileIndex(idx int, groupName InstanceGroupName) string {
	return fmt.Sprintf("at %d-th plan for instance group %q", idx+1, groupName)
}
